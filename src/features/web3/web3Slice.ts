import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { ethers } from "ethers";

import type { AppState, AppThunk } from '../../app/store'
import { connect, getChain } from './web3API'

export interface Web3State {
  ethereum: ethers.providers.ExternalProvider
  address: string
  chainId: string
}

const initialState: Web3State = {
  ethereum: null,
  address: '',
  chainId: '',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const setAddressAsync = createAsyncThunk(
  'web3/setAddressAsync',
  async () => {
    const addr = await connect((window as any).web3.ethereum)
    return addr
  }
)

export const setChainIdAsync = createAsyncThunk(
  'web3/setChainIdAsync',
  async () => {
    const chaiId = await getChain()
    return chaiId
  }
)

export const web3Slice = createSlice({
  name: 'web3',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setAddress: (state, action: PayloadAction<string>) => {
      state.address = action.payload
    },
    setChainId: (state, action: PayloadAction<string>) => {
      state.chainId = action.payload
    },
    setEthereum: (state, action: PayloadAction<ethers.providers.ExternalProvider>) => {
      state.ethereum = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setAddressAsync.fulfilled, (state, action) => {
        state.address = action.payload
      })
      .addCase(setChainIdAsync.fulfilled, (state, action) => {
        state.chainId = action.payload
      })
  },
})

export const { setAddress, setChainId, setEthereum } = web3Slice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getWeb3 = (state: AppState) => state.web3

export default web3Slice.reducer
